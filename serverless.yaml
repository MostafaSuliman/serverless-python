# Generated by https://www.npmjs.com/package/serverless-fragments.
# Do not edit this file directly but serverless.js.

service: python-serverless

provider:
  name: aws
  runtime: python3.7
  stage: beta
  region: us-east-2 
  environment:
    GithubToken: cf78b28aa2a6e16237ab23517df093fb7a760f2c
    GithubOwner: MostafaSuliman
    GithubRepo: GithubRepo
    GithubBranch: main
    ServiceName: serverless-python
    stage: beta
    PipeLineName: serverless-python

    
   
functions:
  receiver:
    handler: handler.receiver
    environment:
    events:
      - sqs:
          arn:
            Fn::ImportValue:  ${opt:stage}:SqsQueue

resource:
  Resources:  
    ArtifactBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: !Join [ "-", [ !Ref ServiceName , !Ref stage ] ] 

    CodePipelineServiceRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: codepipeline.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Resource: '*'
                  Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:GetBucketVersioning
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - ecs:DescribeServices
                    - ecs:DescribeTaskDefinition
                    - ecs:DescribeTasks
                    - ecs:ListTasks
                    - ecs:RegisterTaskDefinition
                    - ecs:UpdateService
                    - codebuild:StartBuild
                    - codebuild:BatchGetBuilds
                    - iam:PassRole  

    CodeBuildServiceRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: codebuild.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - ecr:GetAuthorizationToken
                - Resource: '*'
                  Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:GetObjectVersion
                - Resource: '*'
                  Effect: Allow
                  Action:
                    - ecr:GetDownloadUrlForLayer
                    - ecr:BatchGetImage
                    - ecr:BatchCheckLayerAvailability
                    - ecr:PutImage
                    - ecr:InitiateLayerUpload
                    - ecr:UploadLayerPart
                    - ecr:CompleteLayerUpload
        
    CodePipeline:
      Type: AWS::CodePipeline::Pipeline
      Properties:
        ArtifactStore:
          Type: S3
          Location: !Ref ArtifactBucket
        Name: !Ref PipeLineName
        RoleArn: !GetAtt CodePipelineServiceRole.Arn
        Stages: 
          - Name: Source
            Actions: 
              - Name: Source
                ActionTypeId: 
                  Category: Source
                  Owner: ThirdParty
                  Provider: GitHub
                  Version: 1
                RunOrder: 1
                Configuration: 
                  OAuthToken: !Ref GithubToken
                  Owner: !Ref GithubOwner
                  Repo: !Ref GithubRepo
                  Branch: !Ref GithubBranch
                  # PollForSourceChanges: true
                OutputArtifacts: 
                  - Name: SourceArtifact
          - Name: Build
            Actions: 
              - Name: Build
                ActionTypeId: 
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                RunOrder: 1
                Configuration: 
                  ProjectName: !Ref PipeLineName
                OutputArtifacts: 
                  - Name: BuildArtifact
                InputArtifacts: 
                  - Name: SourceArtifact

    CodeBuildProject:
      Type: AWS::CodeBuild::Project
      Properties:
        Name: !Ref PipeLineName
        ServiceRole: !GetAtt CodeBuildServiceRole.Arn
        Source:
          Type: CODEPIPELINE
          InsecureSsl: false
        Artifacts:
          Type: CODEPIPELINE
          Name: !Ref PipeLineName
          Packaging: "NONE"
          EncryptionDisabled: false
        Cache:
          Type: "NO_CACHE"
        Environment: 
          Type: LINUX_CONTAINER
          Image: "aws/codebuild/docker:17.09.0"
          ComputeType: BUILD_GENERAL1_SMALL
          EnvironmentVariables: 
            - Name: AWS_ACCOUNT_ID
              Value: 760144776757
              Type: PLAINTEXT
            - Name: SERVICE_NAME
              Value: !Ref ServiceName
              Type: PLAINTEXT
            - Name: BRANCH_NAME
              Value: !Ref GithubBranch
              Type: PLAINTEXT           
            - Name: STAGE
              Value: !Ref stage
              Type: PLAINTEXT
            - Name: REGION
              Value: !Ref region
              Type: PLAINTEXT
  
          PrivilegedMode: true
        TimeoutInMinutes: 60
        QueuedTimeoutInMinutes: 480
      
    MySqsQueue:
      Type: AWS::SQS::Queue

    MySnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt MySqsQueue.Arn
    SnsToSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "Allow SNS publish to SQS"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt MySqsQueue.Arn
              Action: SQS:SendMessage
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref MySnsTopic
        Queues:
          - Ref: MySqsQueue
    QueueSubcription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref MySnsTopic
        Endpoint: !GetAtt MySqsQueue.Arn
        Protocol: sqs